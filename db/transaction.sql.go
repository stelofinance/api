// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: transaction.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT 
    INTO transaction (sending_wallet_id, receiving_wallet_id, created_at, memo)
    VALUES ($1, $2, $3, $4)
    RETURNING id
`

type CreateTransactionParams struct {
	SendingWalletID   int64          `json:"sending_wallet_id"`
	ReceivingWalletID int64          `json:"receiving_wallet_id"`
	CreatedAt         time.Time      `json:"created_at"`
	Memo              sql.NullString `json:"memo"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (int64, error) {
	row := q.db.QueryRow(ctx, createTransaction,
		arg.SendingWalletID,
		arg.ReceivingWalletID,
		arg.CreatedAt,
		arg.Memo,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteTransactionById = `-- name: DeleteTransactionById :execrows
DELETE FROM transaction WHERE (sending_wallet_id = $1 OR receiving_wallet_id = $2) AND id = $3
`

type DeleteTransactionByIdParams struct {
	SendingWalletID   int64 `json:"sending_wallet_id"`
	ReceivingWalletID int64 `json:"receiving_wallet_id"`
	ID                int64 `json:"id"`
}

func (q *Queries) DeleteTransactionById(ctx context.Context, arg DeleteTransactionByIdParams) (int64, error) {
	result, err := q.db.Exec(ctx, deleteTransactionById, arg.SendingWalletID, arg.ReceivingWalletID, arg.ID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const deleteTransactionsById = `-- name: DeleteTransactionsById :execrows
DELETE FROM transaction 
    WHERE (sending_wallet_id = $1 OR receiving_wallet_id = $2) AND id = ANY($3::BIGINT[])
`

type DeleteTransactionsByIdParams struct {
	SendingWalletID   int64   `json:"sending_wallet_id"`
	ReceivingWalletID int64   `json:"receiving_wallet_id"`
	Column3           []int64 `json:"column_3"`
}

func (q *Queries) DeleteTransactionsById(ctx context.Context, arg DeleteTransactionsByIdParams) (int64, error) {
	result, err := q.db.Exec(ctx, deleteTransactionsById, arg.SendingWalletID, arg.ReceivingWalletID, arg.Column3)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getTransactions = `-- name: GetTransactions :many
SELECT id, sending_wallet_id, receiving_wallet_id, created_at, memo FROM transaction 
    WHERE sending_wallet_id = $1 
    OR receiving_wallet_id = $1 
    ORDER BY created_at 
    DESC LIMIT $2
`

type GetTransactionsParams struct {
	SendingWalletID int64 `json:"sending_wallet_id"`
	Limit           int32 `json:"limit"`
}

func (q *Queries) GetTransactions(ctx context.Context, arg GetTransactionsParams) ([]Transaction, error) {
	rows, err := q.db.Query(ctx, getTransactions, arg.SendingWalletID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.SendingWalletID,
			&i.ReceivingWalletID,
			&i.CreatedAt,
			&i.Memo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

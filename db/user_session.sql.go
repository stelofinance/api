// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: user_session.sql

package db

import (
	"context"
	"time"
)

const deleteSession = `-- name: DeleteSession :execrows
DELETE FROM user_session WHERE id = $1
`

func (q *Queries) DeleteSession(ctx context.Context, id int64) (int64, error) {
	result, err := q.db.Exec(ctx, deleteSession, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const deleteSessionsByUserId = `-- name: DeleteSessionsByUserId :exec
DELETE FROM user_session WHERE user_id = $1
`

func (q *Queries) DeleteSessionsByUserId(ctx context.Context, userID int64) error {
	_, err := q.db.Exec(ctx, deleteSessionsByUserId, userID)
	return err
}

const deleteUserSessionByUserIdAndWalletId = `-- name: DeleteUserSessionByUserIdAndWalletId :exec
DELETE FROM user_session WHERE user_id = $1 AND wallet_id = $2
`

type DeleteUserSessionByUserIdAndWalletIdParams struct {
	UserID   int64 `json:"user_id"`
	WalletID int64 `json:"wallet_id"`
}

func (q *Queries) DeleteUserSessionByUserIdAndWalletId(ctx context.Context, arg DeleteUserSessionByUserIdAndWalletIdParams) error {
	_, err := q.db.Exec(ctx, deleteUserSessionByUserIdAndWalletId, arg.UserID, arg.WalletID)
	return err
}

const getUserSessions = `-- name: GetUserSessions :many
SELECT id, used_at, user_id, wallet_id FROM user_session WHERE user_id = $1
`

func (q *Queries) GetUserSessions(ctx context.Context, userID int64) ([]UserSession, error) {
	rows, err := q.db.Query(ctx, getUserSessions, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserSession
	for rows.Next() {
		var i UserSession
		if err := rows.Scan(
			&i.ID,
			&i.UsedAt,
			&i.UserID,
			&i.WalletID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertUserSession = `-- name: InsertUserSession :one
INSERT INTO user_session (used_at, user_id, wallet_id) VALUES ($1, $2, $3) RETURNING id
`

type InsertUserSessionParams struct {
	UsedAt   time.Time `json:"used_at"`
	UserID   int64     `json:"user_id"`
	WalletID int64     `json:"wallet_id"`
}

func (q *Queries) InsertUserSession(ctx context.Context, arg InsertUserSessionParams) (int64, error) {
	row := q.db.QueryRow(ctx, insertUserSession, arg.UsedAt, arg.UserID, arg.WalletID)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const updateUserSessionUsedAt = `-- name: UpdateUserSessionUsedAt :execrows
UPDATE user_session SET used_at = $1 WHERE id = $2
`

type UpdateUserSessionUsedAtParams struct {
	UsedAt time.Time `json:"used_at"`
	ID     int64     `json:"id"`
}

func (q *Queries) UpdateUserSessionUsedAt(ctx context.Context, arg UpdateUserSessionUsedAtParams) (int64, error) {
	result, err := q.db.Exec(ctx, updateUserSessionUsedAt, arg.UsedAt, arg.ID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const updateUserSessionWallet = `-- name: UpdateUserSessionWallet :exec
UPDATE user_session SET wallet_id = $1 WHERE id = $2
`

type UpdateUserSessionWalletParams struct {
	WalletID int64 `json:"wallet_id"`
	ID       int64 `json:"id"`
}

func (q *Queries) UpdateUserSessionWallet(ctx context.Context, arg UpdateUserSessionWalletParams) error {
	_, err := q.db.Exec(ctx, updateUserSessionWallet, arg.WalletID, arg.ID)
	return err
}

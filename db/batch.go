// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: batch.go

package db

import (
	"context"

	"github.com/jackc/pgx/v4"
)

const createTransactionAssets = `-- name: CreateTransactionAssets :batchexec
INSERT INTO transaction_asset (transaction_id, asset_id, quantity) VALUES ($1, $2, $3)
`

type CreateTransactionAssetsBatchResults struct {
	br  pgx.BatchResults
	ind int
}

type CreateTransactionAssetsParams struct {
	TransactionID int64 `json:"transaction_id"`
	AssetID       int64 `json:"asset_id"`
	Quantity      int64 `json:"quantity"`
}

func (q *Queries) CreateTransactionAssets(ctx context.Context, arg []CreateTransactionAssetsParams) *CreateTransactionAssetsBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.TransactionID,
			a.AssetID,
			a.Quantity,
		}
		batch.Queue(createTransactionAssets, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &CreateTransactionAssetsBatchResults{br, 0}
}

func (b *CreateTransactionAssetsBatchResults) Exec(f func(int, error)) {
	for {
		_, err := b.br.Exec()
		if err != nil && (err.Error() == "no result" || err.Error() == "batch already closed") {
			break
		}
		if f != nil {
			f(b.ind, err)
		}
		b.ind++
	}
}

func (b *CreateTransactionAssetsBatchResults) Close() error {
	return b.br.Close()
}
